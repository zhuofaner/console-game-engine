import * as ansi from "ansi";
import { format } from "./basic/Utils";

let cursor:ansi.Cursor = ansi(process.stdout);
import { Picture } from "./basic/Picture";
import { PictureNumber } from "./basic/PictureNumber";
import { PictureChar } from "./basic/PictureChar";
import  UIResponder  from "./basic/UIResponder";
import VelocityVector from "./basic/VelocityVector";
import { LoopSound } from "./basic/LoopSound";
import LayerManager from "./basic/LayerManager";
import AnimationSystem from "./basic/AnimationSystem";
import { console } from "./basic/Utils";
import { stdout, stdin } from "process";

const SND_MILLSEC = new LoopSound("./res/sound/mill_second.mp3").loop();
const SND_SEC = new LoopSound("./res/sound/click_second.mp3");
const SND_COLLIDE = new LoopSound("./res/sound/collide.mp3");
const SCREEN = new UIResponder();

stdin.setRawMode(true);
stdin.setEncoding('utf8');

SCREEN.clear();
Picture.configRes();
// cursor
//   .green()                 // Set font color to red
//   .bg.white()             // Set background color to grey
// let exampleFather = new Picture('detective')
// exampleFather.setWritePosition(cursor, 80, 15);

// cursor
//   .green()                 // Set font color to red
//   .bg.white()             // Set background color to grey
// PictureInstance.setWritePosition(cursor, 100, 5);
// new Picture('detective').setWritePosition(cursor, 130, 5);

// exampleFather.addChild(new Picture('coin'), 1, 1);
// const DynamicNumber = <PictureNumber> new PictureNumber(14445);
const DATE_NOW = new Date();
const DATE_FORMATTER = "hh:mm:ss.SS";
const SecondCounter = new PictureChar(format(DATE_NOW, DATE_FORMATTER));
const NumberVV = AnimationSystem.createVelocityVector({x: 1, y: 1}, 15).setPosition(1, 1);
SecondCounter.setAnimation(NumberVV);
// exampleFather.addChild(new Picture('coin'), 35, 1);
// exampleFather.addChild(new Picture('coin'), 35, 12);
// setInterval(()=>DynamicNumber.number+=48,1000);

NumberVV.setOnMoveListener((vv:VelocityVector, target)=>{
  //读秒
  let c_date = new Date();
  (<PictureChar>target).string = format(c_date, DATE_FORMATTER);
  //边界检测
  if(vv.y + SecondCounter.height >= (SCREEN.rows+15) ||
    vv.y <= -15){
      console.log("Reach bottom or top!!!");
      SND_COLLIDE.loop();
      vv.vector = { x: vv.vector.x, y: - vv.vector.y };
  }else
  if(vv.x + SecondCounter.width >= (SCREEN.columns+30) ||
    vv.x <= -30){
      console.log("Reach left or Right!!!");
      SND_COLLIDE.loop();
      vv.vector = { x: - vv.vector.x, y: vv.vector.y };
  }
});
const FRAME = 100;
// DynamicNumber.setPosition(cursor,
//   NumberVV.move(FRAME).round()
// );
let lastSec = 0;
let point = { x: 101, y: 30 };
LayerManager.load()
  .renderGrid()
  // .add(SecondCounter)
  // .render();
//   .renderGrid({ x: point.x, y: point.y, width: 60, height: 30})
//   .add(SecondCounter).render()
//   .renderGrid({ x: 1, y: 1, width: 60, height: 30})
//   .renderGrid({ x: 30, y: 15, width: 60, height: 30})

// AnimationSystem.play();

// function loop(){
//   point.x +=2; point.y -=1;
//   LayerManager.load()
//     .renderGrid({ x: point.x, y: point.y, width: 60, height: 30})
//     .render();
//   setTimeout(loop, FRAME);
// }
// loop();
// function loop(){
//   // SCREEN.clear();
//   SecondCounter.clear();
  // let c_date = new Date();
//   if(c_date.getSeconds() != lastSec){
//     lastSec = c_date.getSeconds();
//     SND_SEC.loop();
//   }
  // SecondCounter
  //   .setString(format(c_date, DATE_FORMATTER))
  //   .setPosition(cursor,
  //     NumberVV.move(FRAME).round()
  //   );
//   cursor.goto(0, 0)
//   cursor.reset();
//   setTimeout(loop, FRAME);
// }
// loop();

// new Picture('number_9').setWritePosition(cursor, 1, 1);
// new Picture('number_4').setWritePosition(cursor, 15, 1);
// new Picture('number_5').setWritePosition(cursor, 20, 1);
// new Picture('number_8').setWritePosition(cursor, 30, 1);
// new Picture('number_9').setWritePosition(cursor, 40, 1);
// exampleFather.addChild(new Picture('coin'), 40, 40);
// cursor
//   .green()                 // Set font color to red
//   .bg.white()
// PictureInstance.setWritePosition(cursor, 130, 5);
//   .goto(100,5)
//   .write(DETECTIVE_PIC) // Write 'Hello World!' to stdout
// cursor.bg.reset()            // Reset the bgcolor before writing the trailing \n,
                         //      to avoid Terminal glitches
//   .write('\n')           // And a final \n to wrap things up
 
// Rendering modes are persistent:
// cursor.hex('#660000').bold().underline()
 
// You can use the regular logging functions, text will be green:
// console.log('This is blood red, bold text')
 
// To reset just the foreground color:
 
// console.log('This will still be bold')
 
// to go to a location (x,y) on the console
// note: 1-indexed, not 0-indexed:
// cursor.goto(10, 5).write('Five down, ten over')
// cursor.goto(1, 1).write(DETECTIVE_PIC);
 
// to clear the current line:
// cursor.horizontalAbsolute(0).eraseLine().write('Starting again')
 
// to go to a different column on the current line:
// cursor.horizontalAbsolute(5).write('column five')
 
// Clean up after yourself!

cursor.fg.reset()
cursor.reset()